program -> program stmt | __p1__ stmt
stmt -> var_stmt | func_stmt
var_stmt -> type __p2__ var_list ;
type -> int | bool | char | float
var_list -> __p3__ var_list , __p4__ var_item | __p5__ var_item
var_item -> id __p6__ | id __p6__ = expr
func_stmt -> type id __p7__ ( param_list_stmt ) { sentences } __p8__ | type id __p7__ ( ) { sentences } __p8__
param_list_stmt -> param_list_stmt , param_stmt | param_stmt
param_stmt -> type id __p28__
sentences -> sentences sentence | sentence
sentence -> single_sentence | compound_sentence
compound_sentence -> __p9__ { sentences } __p10__
single_sentence -> var_stmt | assignment_sentence | if_branch | for_loop | while_loop | expr_sentence | return_sentence
assignment_sentence -> assignment ;
assignment -> id = expr __p19__
if_branch -> if ( expr ) __p21__ compound_sentence __p22__ | if ( expr ) __p21__ compound_sentence __p23__ else compound_sentence __p24__
for_loop -> for ( assignment ; expr ; assignment ) sentence
while_loop -> __p27__ while ( expr ) __p25__ sentence __p26__
expr_sentence -> expr ;
expr -> expr or expr_and __p12__ | expr_and __p11__ | error_expr
error_expr -> id id __p20__ | const const __p20__ | id const __p20__ | const id __p20__
expr_and -> expr_and and expr_rel __p12__ | expr_rel __p11__
expr_rel -> expr_add > expr_add __p13__ | expr_add >= expr_add __p13__ | expr_add < expr_add __p13__ | expr_add <= expr_add __p13__ | expr_add == expr_add __p13__ | expr_add != expr_add __p13__| expr_add __p11__
expr_add -> expr_add + T __p13__ | expr_add - T __p13__ | T __p11__
T -> T * expr_not __p13__ | T / expr_not __p13__ | expr_not __p11__
expr_not -> ! F __p14__ | F __p11__
F -> ( expr ) __p15__ | id __p16__ | const __p11__ | func_call __p11__
const -> int_const __p17__ | char_const __p17__ | float_const __p17__ | true __p17__ | false __p17__
func_call -> id __p18__ ( param_list_call )
param_list_call -> param_list_call , expr | expr
return_sentence -> return expr ; | return ;