program -> program stmt | __p1__ stmt
stmt -> var_stmt | func_stmt
var_stmt -> type __p2__ var_list ;
type -> int | bool | char | float
var_list -> __p3__ var_list , __p4__ var_item | __p5__ var_item
var_item -> id __p6__ | id __p6__ = expr
func_stmt -> type id __p7__ ( param_list_stmt ) { sentences } __p8__ | type id __p7__ ( ) { sentences } __p8__
param_list_stmt -> param_list_stmt , param_stmt | param_stmt
param_stmt -> type id
sentences -> sentences sentence | sentence
sentence -> single_sentence | compound_sentence
compound_sentence -> __p9__ { sentences } __p10__
single_sentence -> var_stmt | assignment_sentence | if_branch | for_loop | while_loop | expr_sentence | return_sentence
assignment_sentence -> assignment ;
assignment -> id = expr
if_branch -> if ( expr ) compound_sentence | if ( expr ) compound_sentence else compound_sentence
for_loop -> for ( assignment ; expr ; assignment ) sentence
while_loop -> while ( expr ) sentence
expr_sentence -> expr ;
expr -> expr or expr_and | expr_and
expr_and -> expr_and and expr_rel | expr_rel
expr_rel -> expr_add > expr_add | expr_add >= expr_add | expr_add < expr_add | expr_add <= expr_add | expr_add == expr_add | expr_add != expr_add | expr_add
expr_add -> expr_add + T | expr_add - T | T
T -> T * expr_not | T / expr_not | expr_not
expr_not -> ! F | F
F-> ( expr ) | id | const | func_call
const -> int_const | char_const | float_const | true | false
func_call -> id ( param_list_call )
param_list_call -> param_list_call , expr | expr
return_sentence -> return expr ; | return ;